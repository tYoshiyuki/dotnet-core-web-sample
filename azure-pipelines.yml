# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Debug'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET8 sdk'
  inputs:
    packageType: sdk
    version: 8.0.x
    installationPath: $(Agent.ToolsDirectory)/dotnet

- script: dotnet restore DotNetCoreWebSample.sln
  displayName: 'Run dotnet restore'

- script: dotnet build DotNetCoreWebSample.sln --configuration $(buildConfiguration)
  displayName: 'Run dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: DotNetCoreWebSample.Web.Test/DotNetCoreWebSample.Web.Test.csproj
    arguments: -c $(BuildConfiguration) --logger "trx;logfilename=$(Build.DefinitionName)_$(Build.BuildNumber)_$(Build.BuildId).trx" --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true
    testRunTitle: $(Build.DefinitionName)_$(Build.BuildNumber)_$(Build.BuildId)
  displayName: 'Run tests'

- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . dotnet-reportgenerator-globaltool
  displayName: Install ReportGenerator tool
  
- script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
  displayName: 'Create reports'
  
- task: PublishCodeCoverageResults@2
  displayName: 'Publish code coverage'
  inputs:
    summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml  

- task: PublishTestResults@2
  displayName: 'Publish test results'
  inputs:
    testResultsFormat: 'XUnit'
    testResultsFiles: '$(Agent.TempDirectory)/**/*.trx'
    testRunTitle: $(Build.DefinitionName)_$(Build.BuildNumber)_$(Build.BuildId)

- task: DotNetCoreCLI@2
  displayName: 'Run dotnet publish $(buildConfiguration)'
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'